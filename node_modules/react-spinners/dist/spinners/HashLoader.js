(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'domkit/appendVendorPrefix', 'domkit/insertKeyframesRule', '../helpers'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('domkit/appendVendorPrefix'), require('domkit/insertKeyframesRule'), require('../helpers'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.appendVendorPrefix, global.insertKeyframesRule, global.helpers);
    global.HashLoader = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _appendVendorPrefix, _insertKeyframesRule, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _appendVendorPrefix2 = _interopRequireDefault(_appendVendorPrefix);

  var _insertKeyframesRule2 = _interopRequireDefault(_insertKeyframesRule);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  /**
   * @param {number} size
   * @param {string} color
   * @return {object} object with keyframe properties
   */

  var keyframesBefore = function keyframesBefore(size, color) {
    var thickness = size / 5;
    var lat = (size - thickness) / 2;
    var offset = lat - thickness;
    color = (0, _helpers.calculateRgba)(color, 0.75);
    return {
      '0%': {
        width: thickness + 'px',
        'box-shadow': lat + 'px ' + -offset + 'px ' + color + ', ' + -lat + 'px ' + offset + 'px ' + color
      },
      '35%': {
        width: size + 'px',
        'box-shadow': '0 ' + -offset + 'px ' + color + ', 0 ' + offset + 'px ' + color
      },
      '70%': {
        width: thickness + 'px',
        'box-shadow': -lat + 'px ' + -offset + 'px ' + color + ', ' + lat + 'px ' + offset + 'px ' + color
      },
      '100%': {
        'box-shadow': lat + 'px ' + -offset + 'px ' + color + ', ' + -lat + 'px ' + offset + 'px ' + color
      }
    };
  };

  /**
   * @param {number} size
   * @param {string} color
   * @return {object} object with keyframe properties
   */

  var keyframesAfter = function keyframesAfter(size, color) {
    var thickness = size / 5;
    var lat = (size - thickness) / 2;
    var offset = lat - thickness;
    color = (0, _helpers.calculateRgba)(color, 0.75);
    return {
      '0%': {
        height: thickness + 'px',
        'box-shadow': offset + 'px ' + lat + 'px ' + color + ', ' + -offset + 'px ' + -lat + 'px ' + color
      },
      '35%': {
        height: size + 'px',
        'box-shadow': offset + 'px ' + 0 + ' ' + color + ', ' + -offset + 'px ' + 0 + ' ' + color
      },
      '70%': {
        height: thickness + 'px',
        'box-shadow': offset + 'px ' + -lat + 'px ' + color + ', ' + -offset + 'px ' + lat + 'px ' + color
      },
      '100%': {
        'box-shadow': offset + 'px ' + lat + 'px ' + color + ', ' + -offset + 'px ' + -lat + 'px ' + color
      }
    };
  };

  var Loader = function (_React$Component) {
    _inherits(Loader, _React$Component);

    function Loader() {
      _classCallCheck(this, Loader);

      return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).apply(this, arguments));
    }

    _createClass(Loader, [{
      key: 'getLineStyle',
      value: function getLineStyle() {
        return {
          position: 'absolute',
          content: '',
          top: '50%',
          left: '50%',
          display: 'block',
          width: this.props.size / 5,
          height: this.props.size / 5,
          borderRadius: this.props.size / 10,
          transform: 'translate(-50%, -50%)'
        };
      }
    }, {
      key: 'getAnimationStyle',
      value: function getAnimationStyle(i) {
        var keyframes = void 0;
        var _props = this.props,
            color = _props.color,
            size = _props.size;

        if (i === 1) {
          keyframes = keyframesBefore(size, color);
        } else {
          keyframes = keyframesAfter(size, color);
        }
        var animationName = (0, _insertKeyframesRule2.default)(keyframes);
        var animation = [animationName, '2s', 'infinite'].join(' ');
        var animationFillMode = '';

        return {
          animation: animation,
          animationFillMode: animationFillMode
        };
      }
    }, {
      key: 'getStyle',
      value: function getStyle(i) {
        return (0, _appendVendorPrefix2.default)(this.getLineStyle(), this.getAnimationStyle(i));
      }
    }, {
      key: 'renderLoader',
      value: function renderLoader(loading) {
        var style = {
          position: 'relative',
          width: this.props.size,
          height: this.props.size,
          transform: 'rotate(165deg)'
        };

        if (loading) {
          return _react2.default.createElement(
            'div',
            { className: 'react-spinners--hash' },
            _react2.default.createElement(
              'div',
              { style: style },
              _react2.default.createElement('div', { style: this.getStyle(1) }),
              _react2.default.createElement('div', { style: this.getStyle(2) })
            )
          );
        }

        return null;
      }
    }, {
      key: 'render',
      value: function render() {
        return this.renderLoader(this.props.loading);
      }
    }]);

    return Loader;
  }(_react2.default.Component);

  /**
   * @type {object}
   */
  Loader.propTypes = {
    loading: _propTypes2.default.bool,
    size: _propTypes2.default.number,
    color: _propTypes2.default.string
  };

  /**
   * @type {object}
   */
  Loader.defaultProps = {
    loading: true,
    size: 50,
    color: "#000000"
  };

  exports.default = Loader;
});