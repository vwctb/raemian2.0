(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'domkit/appendVendorPrefix', 'domkit/insertKeyframesRule'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('domkit/appendVendorPrefix'), require('domkit/insertKeyframesRule'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.appendVendorPrefix, global.insertKeyframesRule);
    global.PacmanLoader = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _appendVendorPrefix, _insertKeyframesRule) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _appendVendorPrefix2 = _interopRequireDefault(_appendVendorPrefix);

  var _insertKeyframesRule2 = _interopRequireDefault(_insertKeyframesRule);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var keyframes = {
    0: {
      "0%": { transform: 'rotate(0deg) ' },
      "50%": { transform: 'rotate(-45deg) ' }
    },
    1: {
      "0%": { transform: 'rotate(0deg) ' },
      "50%": { transform: 'rotate(45deg) ' }
    }
  };

  /**
   * @type {object}
   */
  var animations = {};

  var Loader = function (_React$Component) {
    _inherits(Loader, _React$Component);

    function Loader() {
      _classCallCheck(this, Loader);

      return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).apply(this, arguments));
    }

    _createClass(Loader, [{
      key: 'getBallStyle',
      value: function getBallStyle() {
        return {
          backgroundColor: this.props.color,
          width: this.props.size,
          height: this.props.size,
          margin: this.props.margin,
          borderRadius: '100%'
        };
      }
    }, {
      key: 'getAnimationStyle',
      value: function getAnimationStyle(i) {
        var size = this.props.size;
        var animationName = animations[size];

        if (!animationName) {
          var keyframesBall = {
            '75%': {
              opacity: 0.7
            },
            '100%': {
              transform: 'translate(' + -4 * size + 'px, ' + -size / 4 + 'px)'
            }
          };
          animationName = (0, _insertKeyframesRule2.default)(keyframesBall);
          animations[size] = animationName;
        }

        var animation = [animationName, '1s', i * 0.25 + 's', 'infinite', 'linear'].join(' ');
        var animationFillMode = 'both';

        return {
          animation: animation,
          animationFillMode: animationFillMode
        };
      }
    }, {
      key: 'getStyle',
      value: function getStyle(i) {
        if (i <= 1) {
          var s1 = this.props.size + 'px solid transparent';
          var s2 = this.props.size + 'px solid ' + this.props.color;

          var animationName = (0, _insertKeyframesRule2.default)(keyframes[i]);
          var animation = [animationName, '0.8s', 'infinite', 'ease-in-out'].join(' ');

          return {
            width: 0,
            height: 0,
            borderRight: s1,
            borderTop: i === 0 ? s1 : s2,
            borderLeft: s2,
            borderBottom: i === 0 ? s2 : s1,
            borderRadius: this.props.size,
            position: 'absolute',
            animation: animation
          };
        }

        return (0, _appendVendorPrefix2.default)(this.getBallStyle(i), this.getAnimationStyle(i), {
          width: 10,
          height: 10,
          transform: 'translate(0, ' + -this.props.size / 4 + 'px)',
          position: 'absolute',
          top: 25,
          left: 100
        });
      }
    }, {
      key: 'renderLoader',
      value: function renderLoader(loading) {
        if (loading) {
          var style = {
            position: 'relative',
            fontSize: 0,
            height: this.props.size,
            width: this.props.size
          };

          return _react2.default.createElement(
            'div',
            { className: 'react-spinners--pacman' },
            _react2.default.createElement(
              'div',
              { style: style },
              _react2.default.createElement('div', { style: this.getStyle(0) }),
              _react2.default.createElement('div', { style: _extends({}, this.getStyle(1), { position: 'absolute' }) }),
              _react2.default.createElement('div', { style: this.getStyle(2) }),
              _react2.default.createElement('div', { style: this.getStyle(3) }),
              _react2.default.createElement('div', { style: this.getStyle(4) }),
              _react2.default.createElement('div', { style: this.getStyle(5) })
            )
          );
        }

        return null;
      }
    }, {
      key: 'render',
      value: function render() {
        return this.renderLoader(this.props.loading);
      }
    }]);

    return Loader;
  }(_react2.default.Component);

  /**
   * @type {object}
   */
  Loader.propTypes = {
    loading: _propTypes2.default.bool,
    color: _propTypes2.default.string,
    size: _propTypes2.default.number,
    margin: _propTypes2.default.number
  };

  /**
   * @type {object}
   */
  Loader.defaultProps = {
    loading: true,
    color: '#000000',
    size: 25,
    margin: 2
  };

  exports.default = Loader;
});