'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = penderReducer;

var _actionTypes = require('./action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PENDING = _actionTypes2.default.PENDING,
    SUCCESS = _actionTypes2.default.SUCCESS,
    FAILURE = _actionTypes2.default.FAILURE,
    RESET = _actionTypes2.default.RESET;

/* 
    reducer that manages the penders
    state[PENDER_ACTION] is true when promise is pending,
    when it resolves or rejects, it will turn false 
*/

var initialState = {
    pending: {},
    success: {},
    failure: {}
};

function penderReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    switch (action.type) {
        case PENDING:
            return {
                pending: _extends({}, state.pending, _defineProperty({}, action.payload, true)),
                success: _extends({}, state.success, _defineProperty({}, action.payload, false)),
                failure: _extends({}, state.failure, _defineProperty({}, action.payload, false))
            };
        case SUCCESS:
            return {
                pending: _extends({}, state.pending, _defineProperty({}, action.payload, false)),
                success: _extends({}, state.success, _defineProperty({}, action.payload, true)),
                failure: _extends({}, state.failure, _defineProperty({}, action.payload, false))
            };
        case FAILURE:
            return {
                pending: _extends({}, state.pending, _defineProperty({}, action.payload, false)),
                success: _extends({}, state.success, _defineProperty({}, action.payload, false)),
                failure: _extends({}, state.failure, _defineProperty({}, action.payload, true))
            };
        case RESET:
            return initialState;
        default:
            return state;
    }
}