'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = pender;

var _penderize = require('./penderize');

var _penderize2 = _interopRequireDefault(_penderize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Creates the pend handlers
 * @param {object} pendInfo actionType and handlers { type, onPending, onSuccess, onFailure }
 */
function pender(pendInfo) {
    var _ref;

    var type = pendInfo.type,
        _pendInfo$onPending = pendInfo.onPending,
        onPending = _pendInfo$onPending === undefined ? function (state) {
        return state;
    } : _pendInfo$onPending,
        _pendInfo$onSuccess = pendInfo.onSuccess,
        onSuccess = _pendInfo$onSuccess === undefined ? function (state) {
        return state;
    } : _pendInfo$onSuccess,
        _pendInfo$onFailure = pendInfo.onFailure,
        onFailure = _pendInfo$onFailure === undefined ? function (state) {
        return state;
    } : _pendInfo$onFailure;

    var penderized = (0, _penderize2.default)(type);
    return _ref = {}, _defineProperty(_ref, penderized.PENDING, function (state, action) {
        return onPending(state, action);
    }), _defineProperty(_ref, penderized.SUCCESS, function (state, action) {
        return onSuccess(state, action);
    }), _defineProperty(_ref, penderized.FAILURE, function (state, action) {
        return onFailure(state, action);
    }), _ref;
}

/*
    pender should be used with handleActions of redux-actions.

    Usage:

    const reducer = handleActions({
        ...pender({
            type: 'DO_SOMETHING',
            onPending: (state, action) => state,
            onSuccess: (state, action) => state,
            onFailure: (state, action) => state
        }),
        ...pender({
            type: 'ANOTHER_ACTION',
            onSuccess: (state, action) => {
                return {
                    ...state,
                    data: action.payload.data
                }
            }
        })
    })
*/